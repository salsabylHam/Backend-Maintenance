name: Build & Push Backend to ECR

on:
  push:
    branches:
      - main  # Déclencheur lorsque la branche `main` est mise à jour

       
jobs:
  build:
    name: Build Backend Image & push to ECR
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Permet d'utiliser OIDC
      contents: read  # Permet de lire le code source

    steps:
    
    # Étape 1 : Checkout du code source
    - name: Checkout code
      uses: actions/checkout@v3

    # Étape 2 : Assumer le rôle AWS via OIDC
    - name: Configure AWS credentials (OIDC)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-3
        role-to-assume: arn:aws:iam::380426548948:role/backend-app-GitHubActionsOIDCRole  # Rôle IAM du backend

    # Étape 3 : Connexion à Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    # Étape 4 : Construire, taguer et pousser l'image vers ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: backend-app  # Dépôt ECR backend
        IMAGE_TAG: latest  # Tag pour la version la plus récente
      run: |
        # Construction de l'image Docker avec un tag basé sur le commit SHA et le tag 'latest'
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # Pousser l'image vers ECR avec tous les tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags

    